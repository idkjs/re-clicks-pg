// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Query$ReasonApolloHooks = require("reason-apollo-hooks/src/Query.bs.js");

((require('./App.scss')));

var ppx_printed_query = "query   {\nnodeId  \n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "nodeId");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$1);
      tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field nodeId on type Query is missing");
    }
    return {
            nodeId: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var QueryConfig = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ClickQuery = Query$ReasonApolloHooks.Make({
      query: ppx_printed_query,
      parse: parse
    });

function App(Props) {
  var match = React.useState((function () {
          return 0;
        }));
  var setNumClicks = match[1];
  var numClicks = match[0];
  var match$1 = Curry._7(ClickQuery.use, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
  var full = match$1[1];
  var match$2 = full[/* data */0];
  var tmp;
  if (match$2 !== undefined) {
    var match$3 = JSON.stringify(Caml_option.valFromOption(match$2));
    tmp = React.createElement("div", undefined, React.createElement("button", {
              onClick: (function (param) {
                  return Curry._1(setNumClicks, (function (param) {
                                return numClicks + 1 | 0;
                              }));
                })
            }, String(numClicks), " clicks"), match$3 !== undefined ? match$3 : "");
  } else {
    tmp = full[/* loading */1] ? React.createElement("p", undefined, "Loading...") : (
        full[/* error */2] !== undefined ? React.createElement("p", undefined, "Error") : React.createElement("p", undefined, "error")
      );
  }
  return React.createElement("div", undefined, tmp);
}

var make$1 = App;

exports.QueryConfig = QueryConfig;
exports.ClickQuery = ClickQuery;
exports.make = make$1;
/*  Not a pure module */
